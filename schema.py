"""SQL Schema Definitions

Colin Dietrich, SADA 2020"""

import re

import config


def rewrite_ds_basic(filepath_out, dataset_name):
    """Convert the sample implementation of the logical schema as described in TPC-DS Specification V1.0.0L ,
    specifications.pdf, pg 99, Appendix A and contained in  tpc_root/tools/tpcds.sql.

    Parameters
    ----------
    #filepath_in : str, path to tpcds.sql file
    filepath_out : str, path to write BigQuery formatted table schema, named 'tpcds_bq.sql'
    dataset_name : str, name of BigQuery Dataset to append to existing table names

    Returns
    -------
    None, only writes to file
    """

    # note that leading and trailing whitespace is used to find only table datatype strings
    dtype_mapper = {r'  decimal\(\d+,\d+\)  ': r'  FLOAT64  ',
                    r'  varchar\(\d+\)  ':     r'  STRING  ',
                    r'  char\(\d+\)  ':        r'  STRING  ',
                    r'  integer  ':            r'  INT64  ',
                    # the following are just to have consistent UPPERCASE formatting
                    r'  time  ':               r'  TIME  ',
                    r'  date  ':               r'  DATE  '
                    }

    # read in the base ANSI SQL schema generated by dsdgen
    text = open(config.ds_schema_ansi_sql_filepath).read()

    for k, v in dtype_mapper.items():
        regex = re.compile(k)
        text = regex.sub(v, text)

    text_list_in = text.split("\n")
    text_list_out = []

    for line in text_list_in:
        if "primary key" in line:
            continue
        if "create table" in line:
            split_line = line.split()
            table_name = split_line[2]
            new_line = split_line[:2] + [dataset_name + "." + table_name]
            new_line = " ".join(new_line)
            text_list_out.append(new_line)
        else:
            text_list_out.append(line)

    text = "\n".join(text_list_out)

    open(filepath_out, "w").write(text)


def rewrite_h_basic(filepath_out, dataset_name):
    """Convert the sample implementation of the logical schema as described in TPC-DS Specification V1.0.0L , specifications.pdf, pg 14, and contained in  tpc_root/dbgen/dss.ddl.

    Parameters
    ----------
    #filepath_in : str, path to dss.ddl file
    filepath_out : str, path to write BigQuery formatted table schema, named 'tpch_bq.ddl'
    dataset_name : str, name of BigQuery Dataset to append to existing table names

    Returns
    -------
    None, only writes to file
    """

    # note that leading and trailing whitespace is used to find only table datatype strings
    dtype_mapper = {r' DECIMAL\(\d+,\d+\)': r' FLOAT64',
                    r' VARCHAR\(\d+\)': r' STRING',
                    r' CHAR\(\d+\)': r' STRING',
                    r' INTEGER': r' INT64',
                    # the following are just to have consistent UPPERCASE formatting
                    r' time': r' TIME',
                    r' date': r' DATE'
                    }

    # read in the base ANSI SQL schema generated by qgen
    text = open(config.h_schema_ddl_filepath).read()

    for k, v in dtype_mapper.items():
        regex = re.compile(k)
        text = regex.sub(v, text)

    text_list_in = text.split("\n")
    text_list_out = []

    for line in text_list_in:
        # if "primary key" in line:
        #    continue

        if "CREATE TABLE" in line:
            split_line = line.split()  # split on whitespace of n length
            table_name = split_line[2]
            dataset_table_name = dataset_name + "." + table_name
            split_line[2] = dataset_table_name
            new_line = " ".join(split_line)
            text_list_out.append(new_line)
        else:
            text_list_out.append(line)

    text = "\n".join(text_list_out)

    open(filepath_out, "w").write(text)
